//allocates 1 and 2 bytes every other time and frees them in the same order. This testcase specfically tests if there is different sized memory allocatio.ns work 
void e(){

  int *allot[150];      
  int i;   
  int j=0;
  for(i=0;i<150;i++)
  {
    if(j==0){
    allot[i]=(char *)malloc(1);          
    j=1;
    }else{
            allot[i]=(char *)malloc(2);  
        j=0;
    }
  }
  for(i=0;i<150;i++)
  {
    free(allot[i]);

  }

}

//Allocates 2 bytes 150 times. This is proceeded by freeing the previous allocation and mallocing one byte at the same time. The end of the method frees the rest of the allocations. 
//This varies the allocations and frees. This tests if you can allocate than free and a unique pattern compared to the other test cases. This proves that it will work in any patter on frees and mallocs with variations of sizes. 
void f(){
  int *allot[300];      
  int i;   
  for(i=0;i<150;i++)
  {
    allot[i]=(char *)malloc(2);          
  }
  for(i=150;i<300;i++)
  {
    free(allot[i-150]);  
    allot[i]=(char *)malloc(1); 
  }
    for(i=150;i<300;i++)
  {
    free(allot[i]);  
  }
}